        // normalising the incoming string into a map
        // get the first object of the return string
//        String latLonString = Arrays.stream(response.get().body().split("}")).toList().get(1);
        // this object van be converted to a map by creating smaller arrays splitting the string two times,
//        HashMap<String, String> latLonMap = (HashMap<String, String>) Arrays.stream(latLonString.split(","))
//                .map(part -> part.replaceAll("\"", "").split(":"))
//                // since there are undesirable arrays in this stream due to the "," splitting we need to get rid off them
//                .filter(p -> p.length > 1 )
//                .collect(Collectors.toMap(e->e[0], e->e[1]));
//        System.out.println(latLonMap);
//        latLonMap.keySet().retainAll(List.of("display_name", "lat", "lon" ));
//        placesWiththeirLatLon.put(latLonMap.get("display_name"), latLonMap );


               List<String> responseList =   Arrays.asList(lonLat.get().split("}"));
                    if(responseList.size() >= 1 && responseList.get(0).length() != 0 ){
                        Map<String, String> collect = Arrays.stream(responseList.get(0).split(","))
                                .map(part -> part.replaceAll("\"", "").split(":"))
                                .filter(p -> p.length > 1)
                                .collect(Collectors.toMap(s -> s[0], s -> s[1])
                                );
                        String sourceName = responseList.get(responseList.size() -1).replaceAll("\\W", "" );
                        System.out.println(sourceName);

                        collect.keySet().retainAll(List.of("display_name", "lon", "lat"));

                        temList.put(collect.get("display_name"), collect);
                        if(null != collect.get("lat") &&
                                null !=  collect.get("lon")) {
                            geoServices.addGeographicalLocation(sourceName, collect.get("display_name"), Double.parseDouble(collect.get("lat")), Double.parseDouble(collect.get("lon")));
                        }
                    }
     List<List<URI>> targetUris =  targetLocations.stream().map(targetList -> targetList.stream().map(target ->  {
            try {
                Map<String, URI> tempMap = new HashMap<>();
                tempMap.put(target, new URI("https://nominatim.openstreetmap.org/search?format=json&limit=3&q=" + URLEncoder.encode(target, StandardCharsets.UTF_8)));
                return tempMap ;
            } catch (URISyntaxException e) {
                throw new RuntimeException(e);
            }
        }).toList() ).toList();


        //    private List<List<TargetLink>>  produceTargetLinkList(List<List<String>>  targetLocations ){
        //        return targetLocations.stream().map(targetList -> targetList.stream().map(target ->  {
        //            try {
        //                return new TargetLink(
        //                        new URI("https://nominatim.openstreetmap.org/search?format=json&limit=3&q=" + URLEncoder.encode(target, StandardCharsets.UTF_8)),
        //                        target
        //                );
        //            } catch (URISyntaxException e) {
        //                throw new RuntimeException(e);
        //            }
        //        }).toList() ).toList();
        //    }


        //
        //     private List<Map<String, CompletableFuture<String>>> getCompleteables(List<List<TargetLink>> targetUrls) throws InterruptedException {
        //        HttpClient client = HttpClient.newHttpClient();
        //        List<Map<String, CompletableFuture<String>>> mapOfLatLon = new ArrayList<>();
        //        for(List<TargetLink> UriList : targetUrls) {
        //            mapOfLatLon = UriList.stream().map(targetLink -> {
        //                Map<String, CompletableFuture<String>> locMap = new HashMap<>();
        //                locMap.put(targetLink.getTarget(),
        //                        client.sendAsync(HttpRequest.newBuilder(targetLink.getLink()).GET().build(), HttpResponse.BodyHandlers.ofString())
        //                                .thenApply(HttpResponse::body));
        //                System.out.println(locMap);
        //                return locMap;
        //            }).toList();
        //            Thread.sleep(6000);
        //        }
        //
        //
        //        return mapOfLatLon;
        //    }

                    System.out.println(listOfLatLon);
                    for( Map<String, CompletableFuture<String>> latLonsMap : listOfLatLon){
                        for(String key : latLonsMap.keySet()) {
                            try {
                                if(!latLonsMap.get(key).get().isEmpty()){
         //                        https://www.baeldung.com/jackson-collection-array
        //                        Cannot deserialize value of type `java.lang.String` from Array value (token `JsonToken.START_ARRAY`)
        //                        learn jackson this thing took almost 4 hours
                                    ObjectMapper mapper = new ObjectMapper();
                                    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
                                    OSVJson osvJson= mapper.readValue(latLonsMap.get(key).get(), OSVJson.class);
                                    System.out.println(osvJson.toString());
                                    geoServices.addGeographicalLocation(key,
                                            osvJson.getDisplay_name(),
                                            Double.parseDouble(osvJson.getLon()),
                                            Double.parseDouble(osvJson.getLat()));

                                }
                            } catch (ExecutionException | JsonProcessingException ex) {
                                throw new RuntimeException(ex);
                            }

                        }

                    }



   package projectH.HistoricalDatabaseofCaptives.GISData;

   import com.fasterxml.jackson.annotation.JsonIgnore;
   import com.fasterxml.jackson.annotation.JsonProperty;
   import org.springframework.stereotype.Component;

   import java.io.Serializable;
   import java.lang.*;
   @Component
   public class OSVJson implements Serializable {

     private  String display_name;

     private   String lon;

     private   String lat;

     private String place_id;


    private String  licence;

    private String osm_type;
    private String osm_id;
    private String boundingbox;
    private String type;
    private String osm_class;
    private String importance;
    private String icon;



   @JsonIgnore
    public OSVJson( @JsonProperty("display_name") String display_name,
                    @JsonProperty("lon")String lon,
                    @JsonProperty("lat") String lat,
                    @JsonProperty("osm_type") String osm_type,
                    @JsonProperty("osm_id") String osm_id,
                    @JsonProperty("class") String osm_class,
                    @JsonProperty("boundingbox") String boundingbox,
                    @JsonProperty("type") String type,
                    @JsonProperty("importance") String importance,
                    @JsonProperty("icon") String icon
                    ) {
     this.display_name = display_name;
     this.lon = lon;
     this.lat = lat;
     this.osm_type = osm_type;
     this.osm_id = osm_id;
     this.osm_class = osm_class;
     this.boundingbox = boundingbox;
     this.type = type;
     this.importance = importance;
     this.icon = icon;

    }

    public OSVJson() { }

    public String getDisplay_name() {
     return display_name;
    }

    public void setDisplay_name(String display_name) {
     this.display_name = display_name;
    }

    public String getLon() {
     return lon;
    }

    public void setLon(String lon) {
     this.lon = lon;
    }

    public String getLat() {
     return lat;
    }

    public void setLat(String lat) {
     this.lat = lat;
    }

    public String getPlace_id() {
     return place_id;
    }

    public void setPlace_id(String place_id) {
     this.place_id = place_id;
    }

    public String getLicence() {
     return licence;
    }

    public void setLicence(String licence) {
     this.licence = licence;
    }

    public String getOsm_type() {
     return osm_type;
    }

    public void setOsm_type(String osm_type) {
     this.osm_type = osm_type;
    }

    public String getOsm_id() {
     return osm_id;
    }

    public void setOsm_id(String osm_id) {
     this.osm_id = osm_id;
    }

    public String getBoundingbox() {
     return boundingbox;
    }

    public void setBoundingbox(String boundingbox) {
     this.boundingbox = boundingbox;
    }

    public String getType() {
     return type;
    }

    public void setType(String type) {
     this.type = type;
    }

    public String getOsm_class() {
     return osm_class;
    }

    public void setOsm_class(String osm_class) {
     this.osm_class = osm_class;
    }

    public String getImportance() {
     return importance;
    }

    public void setImportance(String importance) {
     this.importance = importance;
    }

    public String getIcon() {
     return icon;
    }

    public void setIcon(String icon) {
     this.icon = icon;
    }


    @Override
    public String toString() {
     return "OSVJson{" +
             "display_name='" + display_name + '\'' +
             ", lon='" + lon + '\'' +
             ", lat='" + lat + '\'' +
             ", place_id='" + place_id + '\'' +
             ", licence='" + licence + '\'' +
             ", osm_type='" + osm_type + '\'' +
             ", osm_id='" + osm_id + '\'' +
             ", boundingbox='" + boundingbox + '\'' +
             ", type='" + type + '\'' +
             ", osm_class='" + osm_class + '\'' +
             ", importance='" + importance + '\'' +
             ", icon='" + icon + '\'' +
             '}';
    }
   }
    private Map<String, CompletableFuture<String>> getCompleteablesb(List<TargetLink> targetUrls) throws InterruptedException {
        HttpClient client = HttpClient.newHttpClient();
        Map<String, CompletableFuture<String>> mapOfLatLon = new HashMap<>();
        for(TargetLink targetLink : targetUrls) {
            mapOfLatLon.put(targetLink.getTarget(),
                        client.sendAsync(HttpRequest.newBuilder(targetLink.getLink()).GET().build(), HttpResponse.BodyHandlers.ofString())
                                .thenApply(HttpResponse::body));
        }

        return mapOfLatLon;
    }

    //        List<Integer> yearRange = heightBirthdayList.stream().map(e -> e.get(0)).sorted().toList();
            // this is where the standard distribution will be needed

    //        List<Integer> iteratorList = IntStream.range(1, yearRange.size() / subRangeSize + 1).map(e -> e * subRangeSize)
    //                .boxed().toList();
    //
    //
    //        List<List<Integer>>    cohortsList = iteratorList.stream().map(e -> yearRange.subList(e - subRangeSize, e)).toList();


    GeoLocation Debrecen = new GeoLocation(47.531399, 21.6259782 );
            GeoLocation Bekescsaba = new GeoLocation(46.6798003, 21.0985425 	);
            GeoLocation ttt = new GeoLocation(36.3206, 46.0148	);
            GeoLocation Arad = new GeoLocation(46.1753793, 21.3196342);
            GeoLocation Brasso = new GeoLocation(45.6525105, 25.6105654);
            GeoLocation Brasso2 = new GeoLocation(46.99769784507529, 28.84527583003865	);
            GeoLocation Kossice = new GeoLocation(48.72849551597991 , 21.271323360124264 );
            GeoLocation Pozsony = new GeoLocation(48.13908776119138, 17.07639933530841  );